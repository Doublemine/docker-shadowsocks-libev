#! /bin/sh

IMAGE_NAME="doublemine/shadowsocks"

SHADOWSOCKS="/usr/bin/ss-manager"

PM2="/usr/bin/pm2"

function print_usage {
  echo
  echo "Usage:"
  echo "  docker run $IMAGE_NAME [OPTIONS]"
  echo
  echo "OPTIONS"
  echo
  echo "  [-m <encrypt_method>]    Encrypt method: chacha20-ietf-poly1305,"
  echo "                           aes-128-gcm, aes-192-gcm, aes-256-gcm."
  echo "  [-t <timeout>]           socket timeout in seconds,default: 3600"
  echo "  [-u]                     enable udprelay mode"
  echo "  [-v]                     verbose mode"
  echo "  [-p <manager_port>]      manager port, default: 4000"

  echo
  echo "  [--fast-open]            enable TCP fast open"
  echo "  [--obfs <obfs-method>]   enable obfs with tls or http"
  echo "  [--dns1 <dns_server>]    select dns server: 8.8.8.8"
  echo "  [--dns2 <dns_server>]    select dns server: 8.8.4.4"

  echo
  echo "  [-h]                     print this"
  echo
}


OPTIONS=`getopt -o m:t:p:uvh --long encrypt-method:,timeout:,name:,port:,dns1:,dns2:,obfs:,fast-open,help -n "$IMAGE_NAME" -- "$@"`
if [ $? -ne 0 ]; then
  print_usage
  exit 1
fi

eval set -- "$OPTIONS"
while true; do
  case "$1" in
    -m|--encrypt-method)      ENCRYPTION="-m $2";       shift 2;;
    -t|--timeout)             TIMEOUT="-t $2";          shift 2;;
    -p|--port)                PORT="$2";                shift 2;;
    --dns1)                   DNS1="-d $2";             shift 2;;
    --dns2)                   DNS2="-d $2";             shift 2;;
    --obfs)                   OBFS="--plugin obfs-server --plugin-opts obfs=$2";             shift 2;;
    --name)                   NAME="$2";             shift 2;;



    --fast-open)              FAST_OPEN="--fast-open";  shift;;
    -u)                       UDP_RELAY="-u";           shift;;
    -v)                       VERBOSE="-v";             shift;;

    --)                                                 shift; break;;
    -h|--help)                print_usage;              exit 0;;

    *)
      echo "$IMAGE_NAME: unexpected argument: $1"
      print_usage
      exit 1;;
  esac
done

if [ -z "$PORT" -o -z "$ENCRYPTION" ]; then
  echo "$IMAGE_NAME: insufficient arguments."
  print_usage
  exit 1
fi

echo "Launching Shadowsocks manager..."
echo "To watch the output, run"
echo "  docker ps -ql | xargs docker logs -f"


set -e \
&& cp -f /root/ss.yml.template /root/ss.yml

if [ -z $PORT ]; then
  sed -i "s#6001#$PORT#g" /root/ss.yml
fi

if [ -z $MGR_PORT ]; then
  sed -i "s#4001#$MGR_PORT#g" /root/ss.yml
fi

if [ -z $MGR_PWD ]; then
  sed -i "s#123456#$MGR_PWD#g" /root/ss.yml
fi

PORT="--manager-address 127.0.0.1:$PORT"

$PM2 --name "$NAME" -f start ssmgr -x -- -c /root/ss.yml
$SHADOWSOCKS $ENCRYPTION $TIMEOUT $FAST_OPEN $UDP_RELAY $DNS1 $DNS2 $VERBOSE $PORT $OBFS
